#NS grammar
#precedence * / % + - ~


exp = (vardecl | op)+
vardecl = var \w+ = fundecl | simple | array
op = simpleVar | binOp | funcall | anonfundecl | map
array = [op,+] | op..op
fundecl = "func" [op,*] (: op)? {exp*}
anonfundecl = fundecl: simplevar * | \w: (op )+
simpleVar = \w+ | [0-9]+ | \w+[op]
binop = simpleVar (+ | - | / | * | % | ~) simpleVar
funcall = \w+: simplevar * | \w: (op )+
map = simplevar.map: i -> op

===========================
NS -> C
1..5.map: i -> print: i;
===
if (5 > 1) {
    for(int i = 1; i <= 5; i++) print(i)
} else {
    for(int i = 5; i >= 1; i--) print(i)
}

===========================
var array = 1..5.map: i -> i*2;
===
void **array = malloc(5 * sizeof(void*));
for(int i = 1,int j = 0; i <= 5; i++,j++){
    array[j] = malloc(4);
    *array[j]=i*2;
}
===========================
var array = 1..3;
===
void **array = malloc(3 * sizeof(void*));
for(int i = 1,int j = 0; i <= 3; i++,j++){
    array[j] = malloc(4);
    *array[j]=i;
}
============================
var f = func [int a, string b] : int {
    return a;
}
===
int f (int a, void **b) {
    return a;
}

============================

var array2 = 'a'..'c';
===
void **array2 = malloc(3 * sizeof(void*));
array[0] = malloc(1);
*array[0]='a';
array[1] = malloc(1);
*array[1]='b';
array[2] = malloc(1);
*array[2]='c';
===================================
var array2 = 'a':3
===
void **array2 = malloc(3 * sizeof(void*));
array[0] = malloc(1);
*array[0]='a';
array[1] = malloc(1);
*array[1]='a';
array[2] = malloc(1);
*array[2]='a';
=============================
func [int a, int b] : int {
    return a + b;
}: 5 7;
===
int ahxr (int a, int b) {
    return a+b;
}
ahxr(5,7);


