#NS grammar
#precedence * / % + - ~


exp = (vardecl | op)+
vardecl = var \w+ = fundecl | simple | array
op = simpleVar | binOp | funcall | anonfundecl | map
array = [op,+] | op..op
fundecl = "func" [op,*] (: op)? {exp*}
anonfundecl = fundecl: simplevar * | \w: (op )+
simpleVar = \w+ | [0-9]+ | \w+[op]
binop = simpleVar (+ | - | / | * | % | ~) simpleVar
funcall = \w+: simplevar * | \w: (op )+
map = simplevar.map: i -> op




start
    = _ seq:id_seq _ {
          return ast("Sample").add(seq)
      }

id_seq
    = id:id ids:(_ "," _ id)* {
          return ast("IdentifierSequence").add(unroll(id, ids, 3))
      }

id
    = id:$([a-zA-Z_][a-zA-Z0-9_]*) {
          return ast("Identifier").set("name", id)
      }

_ "blank"
    = (co / ws)*

co "comment"
    = "//" (![\r\n] .)*
    / "/*" (!"*/" .)* "*/"
